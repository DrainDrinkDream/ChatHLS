import os
import json

from run_hls import compile_with_vitis_hls
from langchain_openai import ChatOpenAI
from langchain.schema import (HumanMessage, SystemMessage)

buggy_code_path_head = "./Polybench_kernel_hls_llama3_simple"
error_log_path_head = buggy_code_path_head
script_name = "run_hls.tcl"   # run_hls.tcl for polybench || dataset_hls.tcl for HLSGEN

code_header_path = [
    "covariance",
]

os.environ["OPENAI_API_BASE"] = ""
os.environ["OPENAI_API_KEY"] = ""

debug_suggestion_agent = ChatOpenAI(api_key=os.environ.get("OPENAI_API_KEY"),
                                    base_url=os.environ.get("OPENAI_API_BASE"),
                                    model='gpt-4o-2024-08-06',
                                    temperature=0.7)

modify_code_agent = ChatOpenAI(api_key=os.environ.get("OPENAI_API_KEY"),
                               base_url=os.environ.get("OPENAI_API_BASE"),
                               model='gpt-4-turbo',
                               temperature=0.1)


def bug_fix_agent_template(buggy_code_1, error_log_):
    prompt_ = f"""
    You are given a piece of HLS code that contains bugs, the compiler error log. 
    Your task is to debug the buggy code, using the error log to guide you.
    Generate the COT debugging strategy through the buggy code and error log.

    **Inputs:**

    - **Buggy Code**:
    ```cpp
    {buggy_code_1}
    ```

    Vitis HLS Compiler Error Log:
    ```text
    {error_log_}
    ```
"""
    return prompt_


def fixer_prompt(buggy_code_2, debug_suggestion_):
    prompt_augmented_ = f"""Strictly follow the modification suggestions: {debug_suggestion_}
                            correct the code with errors: {buggy_code_2}
                            require that the output only has the modified code, no other explanations, 
                            and the code should not be in markdown format.
                        """
    return prompt_augmented_


def json_read_example(json_file_path_):
    try:
        with open(json_file_path_, 'r', encoding='utf-8') as json_file:
            data = json.load(json_file)
        return data

    except FileNotFoundError:
        return "Error: The file could not be found."
    except json.JSONDecodeError:
        return "Error: The file is not properly formatted JSON."
    except Exception as e:
        return f"Error: An unexpected error occurred: {str(e)}"


def main():
    for code_path in code_header_path:
        buggy_code_path = os.path.join(buggy_code_path_head, code_path, f"{code_path}.cpp")
        error_log_path = os.path.join(error_log_path_head, code_path, "csynth_analysis.json")
        try:
            # read buggy code
            if os.path.exists(buggy_code_path):
                with open(buggy_code_path, 'r', encoding='utf-8') as file:
                    buggy_code = file.read()
            else:
                print(f"file path {buggy_code_path} doesn't exist.")
                continue
            # read error log
            error_log = json_read_example(error_log_path)

            # debug agent
            prompt = bug_fix_agent_template(buggy_code, error_log)
            messages = [
                SystemMessage(content="""You are an expert in High-Level Synthesis (HLS) programming. 
                Your primary task is to identify and debug HLS-incompatible errors in regular C/C++ programs. You will be provided with:
                - **Buggy Code**: A C/C++ program containing HLS-incompatible errors.
                - **Compiler Error Log**: The error messages generated by the Vitis HLS compiler."""),
                HumanMessage(content=prompt),
            ]
            debug_suggestion = debug_suggestion_agent.invoke(messages)
            # modify code agent
            prompt = fixer_prompt(buggy_code, debug_suggestion.content)
            messages = [
                SystemMessage(content="""You are a code correction tool."""),
                HumanMessage(content=prompt),
            ]
            agent_output = modify_code_agent.invoke(messages)
            print(agent_output.response_metadata)

            modified_cpp_name = buggy_code_path
            directory = os.path.dirname(modified_cpp_name)
            if not os.path.exists(directory):
                os.makedirs(directory, exist_ok=True)

            with open(modified_cpp_name, 'w') as file:
                file.write(agent_output.content)

            base_dir = buggy_code_path_head
            if not os.path.exists(base_dir):
                print(f"base_dir {base_dir} doesn't exist")
                return

            sub_dir = base_dir + f"/{code_path}"   ##    "nussinov","symm","syr2k","trmm"
            if os.path.isdir(sub_dir):
                script_name = "run_hls.tcl"
                script_path = sub_dir + f"/{script_name}"
                print(f"handling {sub_dir}")

                compile_with_vitis_hls(script_path, sub_dir)
            else:
                print(f"skip {sub_dir}")

        except Exception as e:
            print(f"An error occurred while processing {buggy_code_path}: {e}")

if __name__ == "__main__":
    main()
